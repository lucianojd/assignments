#ifndef ACS_H
#define ACS_H

#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>
#include <time.h>

#define acs_VERSION_MAJOR @acs_VERSION_MAJOR@
#define acs_VERSION_MINOR @acs_VERSION_MINOR@
#define acs_VERSION_PATCH @acs_VERSION_PATCH@

// Default values.
#define DEFAULT_CLERK_NUM 4
#define DEFAULT_CUSTOMER_NUM 16
#define DEFAULT_CLASS_NUM 2
#define DEFAULT_LOG_RATE 1

#define TRUE 1
#define FALSE 0

#define S_TO_MS(X) (X * 1000)
#define S_TO_US(X) (X * 1000000)
#define S_TO_NS(X) (X * 1000000000)

#define MS_TO_US(X) (X * 1000)
#define MS_TO_NS(X) (X * 1000000)

#define NS_TO_S(X) (X / 1000000000)
#define NS_TO_MS(X) (X / 1000000)
#define NS_TO_US(X) (X / 1000)

#define CLERK_WAIT 10
#define BROADCAST_WAIT 10

#define CLEAR_SCREEN "\033[2J"
#define RESET_CURSOR "\033[0;0H"
#define TRUE 1
#define FALSE 0

#define ERR_Q_ADD 1
#define ERR_FILE_READ 2
#define ERR_ALLOC_MEM 3
#define ERR_ARGS 4

void file_err(FILE* f, const char* caller, const char* msg)
{
	if(!f)
	{
		fprintf(stderr, "%s: unable to open file: %s\n", caller, msg);
		exit(ERR_FILE_READ);
	}
}

void alloc_err(void* mem_ptr, const char* caller, const char* msg)
{
	if(!mem_ptr)
	{
		fprintf(stderr, "%s: unable to allocate memory for: %s\n", caller, msg);
		exit(ERR_ALLOC_MEM);
	}
}

 // Based on timeval_subtract from https://www.gnu.org/software/libc/manual/2.27/html_node/Elapsed-Time.html.
struct timespec elapsed(struct timespec* start)
{
	struct timespec now;
	clock_gettime(CLOCK_MONOTONIC, &now);

	if(start->tv_nsec > now.tv_nsec)
	{
		int nsec = NS_TO_S((now.tv_nsec - start->tv_nsec)) + 1;
		now.tv_nsec -= NS_TO_S(1) * nsec;
		now.tv_sec += nsec;
	}
	if(start->tv_nsec - now.tv_nsec > S_TO_NS(1))
	{
		int nsec = NS_TO_S((start->tv_nsec - now.tv_nsec));
		now.tv_nsec += NS_TO_S(1) * nsec;
		now.tv_sec -= nsec;
	}

	return now;	
}

long elapsed_ms(struct timespec* start)
{
	struct timespec now = elapsed(start);

	long sec_component = S_TO_MS((now.tv_sec - start->tv_sec));
	long nsec_component = NS_TO_MS((now.tv_nsec - start->tv_nsec));

	return sec_component + nsec_component;
}

long elapsed_us(struct timespec* start)
{
	struct timespec now = elapsed(start);

	long sec_component = S_TO_US((now.tv_sec - start->tv_sec)); 
	long nsec_component = NS_TO_US((now.tv_nsec - start->tv_nsec));

	return sec_component + nsec_component;
}

typedef struct Customer Customer;
struct Customer
{
	int id;
	int cls;
	int arrival_t;
	int service_t;
    double waiting_t;
	pthread_t pthread_id;
};

typedef struct Node Node;
struct Node
{
    Node *next;
    Customer customer;
};


typedef struct Queue Queue;
struct Queue
{
    Node *head;
    int len;
};

int add(Queue *q, Customer customer) 
{
	Node *n = (Node*) malloc(sizeof(Node));
	if(!n)
		exit(ERR_Q_ADD);

	n->next = NULL;
	n->customer = customer;
	q->len++;

	if(!q->head) 
	{
		q->head = n;
		return 0;
	}

	Node *itr = q->head;
	for(;itr->next; itr = itr->next);
	itr->next = n;

	return 0;
}

int rem(Queue *q) 
{
	Node *tmp = q->head;
	q->head = q->head->next;
	q->len--;
	free(tmp);
	return 0;
}

int del(Queue *q, int id)
{

	Node *itr = q->head;
	Node *prev = NULL;

	for(;itr; prev = itr, itr = itr->next)
	{
		if(itr->customer.id == id)
		{
			if(!prev)
			{
				q->head = itr->next;
			}
			else
			{
				prev->next = itr->next;
			}

			free(itr);
			q->len--;
			return 0;
		}
	}

	return -1;
}

int destroy(Queue *q)
{
	Node *itr = q->head;
	Node *tmp = NULL;

	for(;itr; itr = tmp)
	{
		tmp = itr->next;
		free(itr);
	}

	q->head = NULL;
	q->len = 0;

	return 0;
}

int peek_id(Queue *q)
{	if(!q->head)
		return 0;

	return q->head->customer.id;
}

#define DEFAULT_STRING_BUFFER_SIZE 64

void customer_to_string(Customer c, char **str)
{
	int buff_size = DEFAULT_STRING_BUFFER_SIZE;
	int n = buff_size;
	char *buffer = (char*)calloc(buff_size, sizeof(char));

	alloc_err(buffer, "customer_to_string", "converting customer to string");

	short int done = FALSE;
	for(;n >= buff_size || !done;)
	{
		done = TRUE;
		n = snprintf(buffer, buff_size, "(%d,%d)", c.id,c.cls);

		if(n >= buff_size)
		{
			done = FALSE;
			buff_size *= 2;
			buffer = (char*)realloc(buffer, sizeof(char) * buff_size);

			alloc_err(buffer, "customer_to_string", "converting customer to string");
		}
	}

	int final_len = strlen(buffer);
	buffer = (char*)realloc(buffer, sizeof(char) * (final_len + 1));

	alloc_err(buffer, "customer_to_string", "converting customer to string");

	*str = buffer;	
}

void customer_q_to_str(Queue *q, int num, char **str)
{
	int buff_size = DEFAULT_STRING_BUFFER_SIZE;
	int n = buff_size;
	char *buffer = (char*)calloc(buff_size, sizeof(char));

	alloc_err(buffer, "customer_q_to_str", "creating string of customer array");

	int i = 0;
	Node *itr = q->head;
	for(;itr; itr = itr->next, i++)
	{
		char *tmp = NULL;
		customer_to_string(itr->customer, &tmp);

		int len = strlen(tmp);
		if(4 + len + buff_size >= buff_size)
		{
			buff_size += len + 4;
			buffer = (char*)realloc(buffer, sizeof(char) * buff_size);

			alloc_err(buffer, "customer_q_to_str", "creating string of customer array");
		}

		if(i != 0)
		{
			strncat(buffer, ", ", 3);
		}

		strncat(buffer, tmp, len);
		free(tmp);
	}

	*str = buffer;
}

#endif
